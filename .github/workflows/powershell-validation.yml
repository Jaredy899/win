name: PowerShell Validation

on:
  push:
    branches: [ main ]
    paths:
      - '**.ps1'
      - '**.psm1'
      - '**.psd1'
  pull_request:
    branches: [ main ]
    paths:
      - '**.ps1'
      - '**.psm1'
      - '**.psd1'
  workflow_dispatch:

jobs:
  validate:
    name: Validate PowerShell Scripts
    runs-on: windows-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Install PSScriptAnalyzer
        shell: pwsh
        run: |
          Set-PSRepository PSGallery -InstallationPolicy Trusted
          Install-Module -Name PSScriptAnalyzer -Force
        
      - name: Run PSScriptAnalyzer
        shell: pwsh
        run: |
          $results = Invoke-ScriptAnalyzer -Path . -Recurse -Settings PSGallery -ExcludeRule PSAvoidUsingWriteHost
          $results | Format-Table -AutoSize
          if ($results.Count -gt 0) {
            Write-Host "PSScriptAnalyzer found $($results.Count) issues. Detailed report follows:"
            $results | Select-Object ScriptName, Line, Message | Format-Table -AutoSize
            $errorCount = ($results | Where-Object { $_.Severity -eq 'Error' }).Count
            if ($errorCount -gt 0) {
              throw "PSScriptAnalyzer found $errorCount errors. Please fix them before merging."
            }
          } else {
            Write-Host "PSScriptAnalyzer found no issues."
          }

      - name: Verify PowerShell Syntax
        shell: pwsh
        run: |
          $errorCount = 0
          foreach ($file in (Get-ChildItem -Path . -Include *.ps1,*.psm1 -Recurse)) {
            try {
              $tokens = $null
              $parseErrors = $null
              $ast = [System.Management.Automation.Language.Parser]::ParseFile($file.FullName, [ref]$tokens, [ref]$parseErrors)
              if ($parseErrors.Count -gt 0) {
                Write-Host "Syntax errors in $($file.FullName):"
                $parseErrors | ForEach-Object { Write-Host "  $($_.Message) at line $($_.Extent.StartLineNumber), char $($_.Extent.StartColumnNumber)" }
                $errorCount += $parseErrors.Count
              }
            } catch {
              Write-Host "Error processing $($file.FullName): $_"
              $errorCount++
            }
          }
          if ($errorCount -gt 0) {
            throw "Found $errorCount syntax errors. Please fix them before merging."
          } else {
            Write-Host "No syntax errors found."
          }

      - name: Test Module Loading
        shell: pwsh
        run: |
          if (Test-Path -Path .\WinSetupModule.psm1) {
            try {
              Import-Module .\WinSetupModule.psm1 -Force -ErrorAction Stop
              Write-Host "Module imported successfully!"
              Get-Command -Module WinSetupModule | Format-Table -AutoSize
            } catch {
              Write-Error "Failed to import module: $_"
              throw "Module import failed"
            }
          } else {
            Write-Host "No module found at root level."
          } 